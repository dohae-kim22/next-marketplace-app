generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  userName     String        @unique
  email        String?       @unique
  password     String?
  phone        String?       @unique
  githubId     String?       @unique
  googleId     String?       @unique
  avatar       String?
  products     Product[]
  productLikes ProductLike[]
  posts        Post[]
  Comment      Comment[]
  postLikes    PostLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProductStatus {
  ON_SALE
  SOLD
}

enum ProductType {
  SALE
  FREE
}

model Product {
  id          Int           @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  location    String
  latitude    Float
  longitude   Float
  views       Int           @default(0)
  status      ProductStatus @default(ON_SALE)
  type        ProductType   @default(SALE)

  photos       Photo[]
  productLikes ProductLike[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
}

model Photo {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}

model ProductLike {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@unique([userId, productId])
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  photo       String?
  location    String
  latitude    Float
  longitude   Float
  views       Int     @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comments  Comment[]
  postLikes PostLike[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model PostLike {
  id Int @id @default(autoincrement())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int

  @@unique([postId, userId])
}
